{"ast":null,"code":"var _jsxFileName = \"/Users/heesoopark/Desktop/myprj/src/components/Dashboard/dashboard.js\";\nimport React, { Component } from 'react';\nimport FormField from '../widgets/FormFields/formFields';\nimport styles from './dashboard.module.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertFromRaw, convertToRaw } from 'draft-js';\nimport { stateToHTML } from 'draft-js-export-html';\nimport { firebase } from '../../firebase';\n\nclass Dashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      updatedContent: '',\n      editorState: EditorState.createEmpty(),\n      registerError: '',\n      loading: false,\n      formdata: {\n        author: {\n          element: 'input',\n          value: '',\n          config: {\n            name: 'author_input',\n            type: 'text',\n            placeholder: 'Enter your name'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          validationMessage: ''\n        },\n        title: {\n          element: 'input',\n          value: '',\n          config: {\n            name: 'title_input',\n            type: 'text',\n            placeholder: 'Enter your title'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          validationMessage: ''\n        },\n        body: {\n          element: 'texteditor',\n          value: '',\n          valid: true\n        }\n      }\n    };\n\n    this.updateForm = (element, content = '') => {\n      const newFormdata = { ...this.state.formdata\n      };\n      const newElement = { ...newFormdata[element.id]\n      };\n\n      if (content === '') {\n        newElement.value = element.event.target.value;\n      } else {\n        newElement.value = content;\n      }\n\n      if (element.blur) {\n        let validData = this.validate(newElement);\n        newElement.valid = validData[0];\n        newElement.validationMessage = validData[1];\n      }\n\n      newElement.touched = element.blur;\n      newFormdata[element.id] = newElement;\n      this.setState({\n        formdata: newFormdata\n      });\n    };\n\n    this.validate = element => {\n      let error = [true, ''];\n\n      if (element.validation.required) {\n        const valid = element.value.trim() !== '';\n        const message = `${!valid ? 'This field is required' : ''}`;\n        error = !valid ? [valid, message] : error;\n      }\n\n      return error;\n    };\n\n    this.submitForm = event => {\n      event.preventDefault();\n      let dataToSubmit = {};\n      let formIsValid = true;\n\n      for (let key in this.state.formdata) {\n        dataToSubmit[key] = this.state.formdata[key].value;\n      }\n\n      for (let key in this.state.formdata) {\n        formIsValid = this.state.formdata[key].valid && formIsValid;\n      }\n\n      if (formIsValid) {\n        this.setState({\n          loading: true,\n          postError: ''\n        });\n        firebase.firestore().collection('posts').add({\n          author: dataToSubmit.author,\n          title: dataToSubmit.title,\n          body: dataToSubmit.body\n        }).then(article => {\n          this.props.history.push(`/dashboard`);\n        }).catch(e => {\n          this.setState({\n            postError: e.message\n          });\n        });\n        console.log(\"SUCCESS\");\n      } else {\n        this.setState({\n          postError: 'Something went wrong'\n        });\n      }\n    };\n\n    this.submitButton = () => this.state.loading ? 'loading...' : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }\n    }, \" Add post \"));\n\n    this.showError = () => this.state.registerError !== '' ? /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    }, this.state.registerError) : '';\n\n    this.onEditorStateChange = editorState => {\n      let contentState = editorState.getCurrentContent();\n      let rawState = convertToRaw(contentState); // let context = null\n\n      rawState.blocks.map(item => {\n        this.setState({\n          updatedContent: item.text\n        });\n      }); //console.log(this.state.updatedContent)\n\n      this.updateForm({\n        id: 'body'\n      }, this.state.updatedContent); // let html = stateToHTML(contentState)\n\n      this.setState({\n        editorState\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.postContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }\n    }, \"Add Post\"), /*#__PURE__*/React.createElement(FormField, {\n      id: 'author',\n      formdata: this.state.formdata.author,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: 'title',\n      formdata: this.state.formdata.title,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Editor, {\n      editorState: this.state.editorState,\n      wrapperClassName: \"myEditor-wrapper\",\n      editorClassName: \"myEditor-editor\",\n      onEditorStateChange: this.onEditorStateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }\n    }), this.submitButton(), this.showError()));\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/heesoopark/Desktop/myprj/src/components/Dashboard/dashboard.js"],"names":["React","Component","FormField","styles","Editor","EditorState","convertFromRaw","convertToRaw","stateToHTML","firebase","Dashboard","state","updatedContent","editorState","createEmpty","registerError","loading","formdata","author","element","value","config","name","type","placeholder","validation","required","valid","touched","validationMessage","title","body","updateForm","content","newFormdata","newElement","id","event","target","blur","validData","validate","setState","error","trim","message","submitForm","preventDefault","dataToSubmit","formIsValid","key","postError","firestore","collection","add","then","article","props","history","push","catch","e","console","log","submitButton","showError","onEditorStateChange","contentState","getCurrentContent","rawState","blocks","map","item","text","render","postContainer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport FormField from '../widgets/FormFields/formFields';\nimport styles from './dashboard.module.css';\n\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertFromRaw, convertToRaw } from 'draft-js';\nimport { stateToHTML } from 'draft-js-export-html';\nimport { firebase } from '../../firebase';\n\nclass Dashboard extends Component {\n    state = {\n        updatedContent: '',\n        editorState: EditorState.createEmpty(),\n        registerError: '',\n        loading: false,\n        formdata:{\n            author:{\n                element:'input',\n                value:'',\n                config:{\n                    name:'author_input',\n                    type:'text',\n                    placeholder:'Enter your name'\n                },\n                validation:{\n                    required:true\n                },\n                valid:false,\n                touched:false,\n                validationMessage:''\n            },\n            title:{\n                element:'input',\n                value:'',\n                config:{\n                    name:'title_input',\n                    type:'text',\n                    placeholder:'Enter your title'\n                },\n                validation:{\n                    required:true\n                },\n                valid:false,\n                touched:false,\n                validationMessage:''\n            },\n            body:{\n                element: 'texteditor',\n                value:'',\n                valid:true\n            }\n        }\n    }\n\n    updateForm = (element, content='') => {\n        const newFormdata = {\n            ...this.state.formdata\n        }\n        const newElement = {\n            ...newFormdata[element.id]\n        }\n\n        if(content === ''){\n            newElement.value = element.event.target.value;\n        }else{\n            newElement.value = content;\n        }\n\n        if(element.blur){\n            let validData = this.validate(newElement);\n            newElement.valid = validData[0];\n            newElement.validationMessage = validData[1];   \n        }\n        newElement.touched = element.blur;\n        newFormdata[element.id] = newElement;\n        \n        this.setState({\n            formdata:newFormdata\n        })\n    }\n\n    validate = (element) => {\n        let error = [true,''];\n\n        if(element.validation.required){\n            const valid = element.value.trim() !=='';\n            const message = `${!valid ? 'This field is required':''}`;\n            error = !valid ? [valid,message] : error\n        }\n\n        return error;\n    }\n\n    submitForm = (event) => {\n        event.preventDefault();\n\n        let dataToSubmit = {};\n        let formIsValid = true;\n\n        for(let key in this.state.formdata){\n            dataToSubmit[key] = this.state.formdata[key].value\n        }\n        for(let key in this.state.formdata){\n            formIsValid = this.state.formdata[key].valid && formIsValid;\n        }\n\n        if(formIsValid){\n            this.setState({\n                loading:true,\n                postError:''\n            })\n            firebase.firestore().collection('posts').add({\n                author: dataToSubmit.author,\n                title: dataToSubmit.title,\n                body: dataToSubmit.body\n            }).then( article => {\n                this.props.history.push(`/dashboard`)\n            }).catch( e => {\n                this.setState({\n                    postError: e.message\n                })\n            }) \n            console.log(\"SUCCESS\")\n\n        }else{\n            this.setState({\n                postError: 'Something went wrong'\n            })\n        }\n    }\n\n    submitButton = () => (\n        this.state.loading ?\n            'loading...'\n        :\n        <div>\n            <button type=\"submit\"> Add post </button>\n        </div>\n    )\n\n    showError = () => (\n        this.state.registerError !== '' ? \n            <div className={styles.error}>{this.state.registerError}</div>\n        : ''\n    )\n\n    onEditorStateChange = (editorState) => {\n        let contentState = editorState.getCurrentContent();\n        let rawState = convertToRaw(contentState)\n        // let context = null\n        rawState.blocks.map((item) => {\n            this.setState({\n                updatedContent: item.text\n            })\n        })\n        //console.log(this.state.updatedContent)\n        this.updateForm({id:'body'}, this.state.updatedContent)\n        // let html = stateToHTML(contentState)\n\n        this.setState({\n            editorState\n        })\n    }\n\n\n    render() {\n        return(\n            <div className={styles.postContainer}>\n                <form onSubmit={this.submitForm}>\n                    <h2>Add Post</h2>\n\n                    <FormField\n                        id={'author'}\n                        formdata={this.state.formdata.author}\n                        change={(element)=>this.updateForm(element)}\n                    />\n                    <FormField\n                        id={'title'}\n                        formdata={this.state.formdata.title}\n                        change={(element)=>this.updateForm(element)}\n                    />\n\n                    <Editor\n                        editorState={this.state.editorState}\n                        wrapperClassName=\"myEditor-wrapper\"\n                        editorClassName=\"myEditor-editor\"\n                        onEditorStateChange={this.onEditorStateChange}\n                    />\n\n                    {this.submitButton()}\n                    {this.showError()}\n                </form>               \n            </div>\n        )\n    }\n}\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}