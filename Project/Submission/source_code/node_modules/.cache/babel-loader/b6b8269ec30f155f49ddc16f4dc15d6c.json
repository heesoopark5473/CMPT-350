{"ast":null,"code":"var _jsxFileName = \"/Users/heesoopark/Desktop/myprj/src/components/Dashboard/dashboard.js\";\nimport React, { Component } from 'react';\nimport FormField from '../widgets/FormFields/formFields';\nimport styles from './dashboard.module.css';\n\nclass Dashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      registerError: '',\n      loading: false,\n      formdata: {\n        author: {\n          element: 'input',\n          value: '',\n          config: {\n            name: 'author_input',\n            type: 'text',\n            placeholder: 'Enter your name'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          validationMessage: ''\n        },\n        title: {\n          element: 'input',\n          value: '',\n          config: {\n            name: 'title_input',\n            type: 'text',\n            placeholder: 'Enter your title'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          validationMessage: ''\n        }\n      }\n    };\n\n    this.updateForm = element => {\n      const newFormdata = { ...this.state.formdata\n      };\n      const newElement = { ...newFormdata[element.id]\n      };\n      newElement.value = element.event.target.value;\n\n      if (element.blur) {\n        let validData = this.validate(newElement);\n        newElement.valid = validData[0];\n        newElement.validationMessage = validData[1];\n      }\n\n      newElement.touched = element.blur;\n      newFormdata[element.id] = newElement;\n      this.setState({\n        formdata: newFormdata\n      });\n    };\n\n    this.validate = element => {\n      let error = [true, ''];\n\n      if (element.validation.required) {\n        const valid = element.value.trim() !== '';\n        const message = `${!valid ? 'This field is required' : ''}`;\n        error = !valid ? [valid, message] : error;\n      }\n\n      return error;\n    };\n\n    this.submitForm = event => {\n      event.preventDefault();\n      let dataToSubmit = {};\n      let formIsValid = true;\n\n      for (let key in this.state.formdata) {\n        dataToSubmit[key] = this.state.formdata[key].value;\n      }\n\n      for (let key in this.state.formdata) {\n        formIsValid = this.state.formdata[key].valid && formIsValid;\n      }\n\n      if (formIsValid) {\n        console.log('SUBMIT POST');\n      } else {}\n    };\n\n    this.submitButton = () => this.state.loading ? 'loading...' : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, \" Add post \"));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.postContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }, \"Add Post\"), /*#__PURE__*/React.createElement(FormField, {\n      id: 'author',\n      formdata: this.state.formdata.author,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }), this.submitButton));\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/heesoopark/Desktop/myprj/src/components/Dashboard/dashboard.js"],"names":["React","Component","FormField","styles","Dashboard","state","registerError","loading","formdata","author","element","value","config","name","type","placeholder","validation","required","valid","touched","validationMessage","title","updateForm","newFormdata","newElement","id","event","target","blur","validData","validate","setState","error","trim","message","submitForm","preventDefault","dataToSubmit","formIsValid","key","console","log","submitButton","render","postContainer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport FormField from '../widgets/FormFields/formFields';\nimport styles from './dashboard.module.css';\n\nclass Dashboard extends Component {\n    state = {\n        registerError: '',\n        loading: false,\n        formdata:{\n            author:{\n                element:'input',\n                value:'',\n                config:{\n                    name:'author_input',\n                    type:'text',\n                    placeholder:'Enter your name'\n                },\n                validation:{\n                    required:true\n                },\n                valid:false,\n                touched:false,\n                validationMessage:''\n            },\n            title:{\n                element:'input',\n                value:'',\n                config:{\n                    name:'title_input',\n                    type:'text',\n                    placeholder:'Enter your title'\n                },\n                validation:{\n                    required:true\n                },\n                valid:false,\n                touched:false,\n                validationMessage:''\n            },\n        }\n    }\n\n    updateForm = (element) => {\n        const newFormdata = {\n            ...this.state.formdata\n        }\n        const newElement = {\n            ...newFormdata[element.id]\n        }\n        newElement.value = element.event.target.value;\n        if(element.blur){\n            let validData = this.validate(newElement);\n            newElement.valid = validData[0];\n            newElement.validationMessage = validData[1];   \n        }\n        newElement.touched = element.blur;\n        newFormdata[element.id] = newElement;\n        \n        this.setState({\n            formdata:newFormdata\n        })\n    }\n\n    validate = (element) => {\n        let error = [true,''];\n\n        if(element.validation.required){\n            const valid = element.value.trim() !=='';\n            const message = `${!valid ? 'This field is required':''}`;\n            error = !valid ? [valid,message] : error\n        }\n\n        return error;\n    }\n\n    submitForm = (event) => {\n        event.preventDefault();\n\n        let dataToSubmit = {};\n        let formIsValid = true;\n\n        for(let key in this.state.formdata){\n            dataToSubmit[key] = this.state.formdata[key].value\n        }\n        for(let key in this.state.formdata){\n            formIsValid = this.state.formdata[key].valid && formIsValid;\n        }\n\n        if(formIsValid){\n            console.log('SUBMIT POST')\n        }else{\n\n        }\n\n    }\n\n    submitButton = () => (\n        this.state.loading ?\n            'loading...'\n        :\n        <div>\n            <button type=\"submit\"> Add post </button>\n        </div>\n    )\n\n\n    render() {\n        return(\n            <div className={styles.postContainer}>\n                <form onSubmit={this.submitForm}>\n                    <h2>Add Post</h2>\n\n                    <FormField\n                        id={'author'}\n                        formdata={this.state.formdata.author}\n                        change={(element)=>this.updateForm(element)}\n                    />\n\n                    {this.submitButton}\n                </form>               \n            </div>\n        )\n    }\n}\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}