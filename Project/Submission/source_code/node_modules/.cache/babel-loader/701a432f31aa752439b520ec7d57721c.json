{"ast":null,"code":"var _jsxFileName = \"/Users/heesoopark/Desktop/myprj/src/components/Dashboard/dashboard.js\";\nimport React, { Component } from 'react';\nimport FormField from '../widgets/FormFields/formFields';\nimport styles from './dashboard.module.css';\nimport { firebase } from '../../firebase';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertFromRaw, convertToRaw } from 'draft-js';\nimport { stateToHTML } from 'draft-js-export-html';\nimport Uploader from '../widgets/FileUploader/fileUploader';\n\nclass Dashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      editorState: EditorState.createEmpty(),\n      postError: '',\n      loading: false,\n      formdata: {\n        author: {\n          element: 'input',\n          value: '',\n          config: {\n            name: 'author_input',\n            type: 'text',\n            placeholder: 'Enter your name'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          validationMessage: ''\n        },\n        title: {\n          element: 'input',\n          value: '',\n          config: {\n            name: 'title_input',\n            type: 'text',\n            placeholder: 'Enter the title'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          validationMessage: ''\n        },\n        body: {\n          element: 'texteditor',\n          value: '',\n          valid: true\n        },\n        image: {\n          element: 'image',\n          value: '',\n          valid: true\n        },\n        team: {\n          element: 'select',\n          value: '',\n          config: {\n            name: 'teams_input',\n            options: []\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          validationMessage: ''\n        }\n      }\n    };\n\n    this.updateForm = (element, content = '') => {\n      const newFormdata = { ...this.state.formdata\n      };\n      const newElement = { ...newFormdata[element.id]\n      };\n\n      if (content === '') {\n        newElement.value = element.event.target.value;\n      } else {\n        newElement.value = content;\n      }\n\n      if (element.blur) {\n        let validData = this.validate(newElement);\n        newElement.valid = validData[0];\n        newElement.validationMessage = validData[1];\n      }\n\n      newElement.touched = element.blur;\n      newFormdata[element.id] = newElement;\n      this.setState({\n        formdata: newFormdata\n      });\n    };\n\n    this.validate = element => {\n      let error = [true, ''];\n\n      if (element.validation.required) {\n        const valid = element.value.trim() !== '';\n        const message = `${!valid ? 'This field is required' : ''}`;\n        error = !valid ? [valid, message] : error;\n      }\n\n      return error;\n    };\n\n    this.submitForm = event => {\n      event.preventDefault();\n      let dataToSubmit = {};\n      let formIsValid = true;\n\n      for (let key in this.state.formdata) {\n        dataToSubmit[key] = this.state.formdata[key].value;\n      }\n\n      for (let key in this.state.formdata) {\n        formIsValid = this.state.formdata[key].valid && formIsValid;\n      }\n\n      console.log(dataToSubmit);\n\n      if (formIsValid) {\n        this.setState({\n          loading: true,\n          postError: ''\n        }); // firebaseArticles.orderByChild(\"id\")\n        // .limitToLast(1).once('value')\n        // .then( snapshot => {\n        //     let articleId = null;\n        //     snapshot.forEach(childSnapshot=>{\n        //         articleId = childSnapshot.val().id;\n        //     });\n        //     dataToSubmit['date'] = firebase.database.ServerValue.TIMESTAMP\n        //     dataToSubmit['id'] = articleId + 1;\n        //     dataToSubmit['team'] = parseInt(dataToSubmit['team'],10);\n        //    firebaseArticles.push(dataToSubmit)\n        //    .then( article => {\n        //         this.props.history.push(`/articles/${article.key}`)\n        //    }).catch( e =>{\n        //        this.setState({\n        //            postError: e.message\n        //        })\n        //    })\n        // })\n      } else {\n        this.setState({\n          postError: 'Something went wrong'\n        });\n      }\n    };\n\n    this.submitButton = () => this.state.loading ? 'loading...' : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }\n    }, \" Add Post \"));\n\n    this.showError = () => this.state.postError !== '' ? /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }\n    }, this.state.postError) : '';\n\n    this.onEditorStateChange = editorState => {\n      let contentState = editorState.getCurrentContent();\n      let rawState = convertToRaw(contentState);\n      let html = stateToHTML(contentState);\n      this.updateForm({\n        id: 'body'\n      }, html);\n      this.setState({\n        editorState\n      });\n    };\n\n    this.storeFilename = filename => {\n      this.updateForm({\n        id: 'image'\n      }, filename);\n    };\n  }\n\n  componentDidMount() {\n    this.loadTeams();\n  } // loadTeams = () => {\n  //     firebaseTeams.once('value')\n  //     .then((snapshot)=>{\n  //         let team = [];\n  //         snapshot.forEach((childSnapshot)=>{\n  //             team.push({\n  //                 id: childSnapshot.val().teamId,\n  //                 name: childSnapshot.val().city\n  //             })\n  //         })\n  //         const newFormdata = {...this.state.formdata};\n  //         const newElement = {...newFormdata['team'] };\n  //         newElement.config.options = team;\n  //         newFormdata['team'] = newElement;\n  //         this.setState({\n  //             formdata: newFormdata\n  //         })\n  //     })\n  // }\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.postContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 21\n      }\n    }, \"Add Post\"), /*#__PURE__*/React.createElement(Uploader, {\n      filename: filename => this.storeFilename(filename),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: 'author',\n      formdata: this.state.formdata.author,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: 'title',\n      formdata: this.state.formdata.title,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Editor, {\n      editorState: this.state.editorState,\n      wrapperClassName: \"myEditor-wrapper\",\n      editorClassName: \"myEditor-editor\",\n      onEditorStateChange: this.onEditorStateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: 'team',\n      formdata: this.state.formdata.team,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 21\n      }\n    }), this.submitButton(), this.showError()));\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/heesoopark/Desktop/myprj/src/components/Dashboard/dashboard.js"],"names":["React","Component","FormField","styles","firebase","Editor","EditorState","convertFromRaw","convertToRaw","stateToHTML","Uploader","Dashboard","state","editorState","createEmpty","postError","loading","formdata","author","element","value","config","name","type","placeholder","validation","required","valid","touched","validationMessage","title","body","image","team","options","updateForm","content","newFormdata","newElement","id","event","target","blur","validData","validate","setState","error","trim","message","submitForm","preventDefault","dataToSubmit","formIsValid","key","console","log","submitButton","showError","onEditorStateChange","contentState","getCurrentContent","rawState","html","storeFilename","filename","componentDidMount","loadTeams","render","postContainer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport FormField from '../widgets/FormFields/formFields';\nimport styles from './dashboard.module.css';\nimport { firebase } from '../../firebase';\n\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertFromRaw, convertToRaw } from 'draft-js';\nimport { stateToHTML } from 'draft-js-export-html';\n\nimport Uploader from '../widgets/FileUploader/fileUploader';\n\nclass Dashboard extends Component {\n\n    state = {\n        editorState: EditorState.createEmpty(),\n        postError:'',\n        loading:false,\n        formdata:{\n            author:{\n                element:'input',\n                value:'',\n                config:{\n                    name:'author_input',\n                    type:'text',\n                    placeholder:'Enter your name'\n                },\n                validation:{\n                    required:true\n                },\n                valid:false,\n                touched:false,\n                validationMessage:''\n            },\n            title:{\n                element:'input',\n                value:'',\n                config:{\n                    name:'title_input',\n                    type:'text',\n                    placeholder:'Enter the title'\n                },\n                validation:{\n                    required:true\n                },\n                valid:false,\n                touched:false,\n                validationMessage:''\n            },\n            body:{\n                element:'texteditor',\n                value:'',\n                valid:true\n            },\n            image:{\n                element:'image',\n                value:'',\n                valid:true\n            },\n            team:{\n                element:'select',\n                value:'',\n                config:{\n                    name:'teams_input',\n                    options:[]\n                },\n                validation:{\n                    required:true\n                },\n                valid:false,\n                touched:false,\n                validationMessage:''\n            }\n        }\n    }\n\n    componentDidMount(){\n        this.loadTeams()\n    }\n\n    // loadTeams = () => {\n    //     firebaseTeams.once('value')\n    //     .then((snapshot)=>{\n    //         let team = [];\n\n    //         snapshot.forEach((childSnapshot)=>{\n    //             team.push({\n    //                 id: childSnapshot.val().teamId,\n    //                 name: childSnapshot.val().city\n    //             })\n    //         })\n\n    //         const newFormdata = {...this.state.formdata};\n    //         const newElement = {...newFormdata['team'] };\n\n    //         newElement.config.options = team;\n    //         newFormdata['team'] = newElement;\n\n    //         this.setState({\n    //             formdata: newFormdata\n    //         })\n    //     })\n    // }\n\n\n    updateForm = (element,content = '') => {\n        const newFormdata = {\n            ...this.state.formdata\n        }\n        const newElement = {\n            ...newFormdata[element.id]\n        }\n\n        if(content === ''){\n            newElement.value = element.event.target.value;\n        } else {\n            newElement.value = content\n        }\n        \n        if(element.blur){\n            let validData = this.validate(newElement);\n            newElement.valid = validData[0];\n            newElement.validationMessage = validData[1];   \n        }\n        newElement.touched = element.blur;\n        newFormdata[element.id] = newElement;\n        \n        this.setState({\n            formdata:newFormdata\n        })\n    }\n\n    validate = (element) => {\n        let error = [true,''];\n\n        if(element.validation.required){\n            const valid = element.value.trim() !=='';\n            const message = `${!valid ? 'This field is required':''}`;\n            error = !valid ? [valid,message] : error\n        }\n\n        return error;\n    }\n\n    submitForm = (event) => {\n        event.preventDefault();\n\n        let dataToSubmit = {};\n        let formIsValid = true;\n\n        for(let key in this.state.formdata){\n            dataToSubmit[key] = this.state.formdata[key].value\n        }\n        for(let key in this.state.formdata){\n            formIsValid = this.state.formdata[key].valid && formIsValid;\n        }\n\n        console.log(dataToSubmit)\n\n        if(formIsValid){\n            this.setState({\n                loading:true,\n                postError:''\n            })\n\n            // firebaseArticles.orderByChild(\"id\")\n            // .limitToLast(1).once('value')\n            // .then( snapshot => {\n            //     let articleId = null;\n            //     snapshot.forEach(childSnapshot=>{\n            //         articleId = childSnapshot.val().id;\n            //     });\n\n            //     dataToSubmit['date'] = firebase.database.ServerValue.TIMESTAMP\n            //     dataToSubmit['id'] = articleId + 1;\n            //     dataToSubmit['team'] = parseInt(dataToSubmit['team'],10);\n\n            //    firebaseArticles.push(dataToSubmit)\n            //    .then( article => {\n            //         this.props.history.push(`/articles/${article.key}`)\n            //    }).catch( e =>{\n            //        this.setState({\n            //            postError: e.message\n            //        })\n            //    })\n            // })\n\n\n        } else {\n            this.setState({\n                postError: 'Something went wrong'\n            })\n        }\n    }\n\n    submitButton = () => (\n        this.state.loading ? \n            'loading...'\n        :\n        <div>\n            <button type=\"submit\"> Add Post </button>\n        </div>\n    )\n\n    showError = () => (\n        this.state.postError !== '' ? \n            <div className={styles.error}>{this.state.postError}</div>\n        : ''\n    )\n\n    onEditorStateChange = (editorState) => {\n\n        let contentState = editorState.getCurrentContent();\n        let rawState = convertToRaw(contentState)\n\n        let html = stateToHTML(contentState)\n\n        this.updateForm({id:'body'},html)\n\n        this.setState({\n            editorState\n        })\n    }\n\n    storeFilename = (filename) => {\n        this.updateForm({id:'image'},filename)\n    }\n\n\n    render(){\n        return(\n            <div className={styles.postContainer}>\n                <form onSubmit={this.submitForm}>\n                    <h2>Add Post</h2>\n\n                    <Uploader\n                        filename={ (filename)=> this.storeFilename(filename) }\n                    />\n\n                    <FormField\n                        id={'author'}\n                        formdata={this.state.formdata.author}\n                        change={(element)=>this.updateForm(element)}\n                    />\n\n                    <FormField\n                        id={'title'}\n                        formdata={this.state.formdata.title}\n                        change={(element)=>this.updateForm(element)}\n                    />\n\n                    <Editor\n                        editorState={this.state.editorState}\n                        wrapperClassName=\"myEditor-wrapper\"\n                        editorClassName=\"myEditor-editor\"\n                        onEditorStateChange={this.onEditorStateChange}\n                    />\n\n                    <FormField\n                        id={'team'}\n                        formdata={this.state.formdata.team}\n                        change={(element)=>this.updateForm(element)}\n                    />\n\n\n                    { this.submitButton() }\n                    { this.showError() }\n                </form>\n            </div>\n        )\n    }\n\n\n}\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}