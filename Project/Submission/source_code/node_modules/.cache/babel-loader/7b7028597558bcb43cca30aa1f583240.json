{"ast":null,"code":"var _jsxFileName = \"/Users/heesoopark/Desktop/myprj/src/components/Dashboard/dashboard.js\";\nimport React, { Component } from 'react';\nimport FormField from '../widgets/FormFields/formFields';\nimport styles from './dashboard.module.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertFromRaw, convertToRaw } from 'draft-js';\nimport { stateToHTML } from 'draft-js-export-html';\n\nclass Dashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      editorState: EditorState.createEmpty(),\n      registerError: '',\n      loading: false,\n      formdata: {\n        author: {\n          element: 'input',\n          value: '',\n          config: {\n            name: 'author_input',\n            type: 'text',\n            placeholder: 'Enter your name'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          validationMessage: ''\n        },\n        title: {\n          element: 'input',\n          value: '',\n          config: {\n            name: 'title_input',\n            type: 'text',\n            placeholder: 'Enter your title'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          validationMessage: ''\n        },\n        body: {\n          element: 'texteditor',\n          value: '',\n          valid: true\n        },\n        country: {\n          element: 'select',\n          value: '',\n          config: {\n            name: 'country_input',\n            options: []\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          validationMessage: ''\n        }\n      }\n    };\n\n    this.loadCountry = () => {\n      let country = [];\n      country.push({\n        id: 1,\n        name: 'Canada'\n      });\n      country.push({\n        id: 2,\n        name: 'USA'\n      });\n      country.push({\n        id: 3,\n        name: 'S.Korea'\n      });\n      country.push({\n        id: 4,\n        name: 'China'\n      });\n      country.push({\n        id: 5,\n        name: 'Italy'\n      });\n      country.push({\n        id: 6,\n        name: 'Japan'\n      });\n      country.push({\n        id: 7,\n        name: 'Spain'\n      });\n      country.push({\n        id: 8,\n        name: 'France'\n      });\n      country.push({\n        id: 9,\n        name: 'Germany'\n      });\n      country.push({\n        id: 10,\n        name: 'India'\n      });\n      const newFormdata = { ...this.state.formdata\n      };\n      const newElements = { ...newFormdata['country']\n      };\n      newElements.config.options = country;\n      newFormdata['country'] = newElements;\n      this.setState({\n        formdata: newFormdata\n      });\n    };\n\n    this.updateForm = (element, content = '') => {\n      const newFormdata = { ...this.state.formdata\n      };\n      const newElement = { ...newFormdata[element.id]\n      };\n\n      if (content === '') {\n        newElement.value = element.event.target.value;\n      } else {\n        newElement.value = content;\n      }\n\n      if (element.blur) {\n        let validData = this.validate(newElement);\n        newElement.valid = validData[0];\n        newElement.validationMessage = validData[1];\n      }\n\n      newElement.touched = element.blur;\n      newFormdata[element.id] = newElement;\n      this.setState({\n        formdata: newFormdata\n      });\n    };\n\n    this.validate = element => {\n      let error = [true, ''];\n\n      if (element.validation.required) {\n        const valid = element.value.trim() !== '';\n        const message = `${!valid ? 'This field is required' : ''}`;\n        error = !valid ? [valid, message] : error;\n      }\n\n      return error;\n    };\n\n    this.submitForm = event => {\n      event.preventDefault();\n      let dataToSubmit = {};\n      let formIsValid = true;\n\n      for (let key in this.state.formdata) {\n        dataToSubmit[key] = this.state.formdata[key].value;\n      }\n\n      for (let key in this.state.formdata) {\n        formIsValid = this.state.formdata[key].valid && formIsValid;\n      }\n\n      console.log(dataToSubmit);\n\n      if (formIsValid) {\n        console.log('SUBMIT POST');\n      } else {\n        this.setState({\n          postError: 'Something went wrong'\n        });\n      }\n    };\n\n    this.submitButton = () => this.state.loading ? 'loading...' : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    }, \" Add post \"));\n\n    this.showError = () => this.state.registerError !== '' ? /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    }, this.state.registerError) : '';\n\n    this.onEditorStateChange = editorState => {\n      let contentState = editorState.getCurrentContent();\n      let rawState = convertToRaw(contentState);\n      let html = stateToHTML(contentState);\n      this.updateForm({\n        id: 'body'\n      }, html);\n      this.setState({\n        editorState\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.loadCountry();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.postContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }\n    }, \"Add Post\"), /*#__PURE__*/React.createElement(FormField, {\n      id: 'author',\n      formdata: this.state.formdata.author,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: 'title',\n      formdata: this.state.formdata.title,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Editor, {\n      editorState: this.state.editorState,\n      wrapperClassName: \"myEditor-wrapper\",\n      editorClassName: \"myEditor-editor\",\n      onEditorStateChange: this.onEditorStateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: 'Country',\n      formdata: this.state.formdata.country,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 21\n      }\n    }), this.submitButton(), this.showError()));\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/heesoopark/Desktop/myprj/src/components/Dashboard/dashboard.js"],"names":["React","Component","FormField","styles","Editor","EditorState","convertFromRaw","convertToRaw","stateToHTML","Dashboard","state","editorState","createEmpty","registerError","loading","formdata","author","element","value","config","name","type","placeholder","validation","required","valid","touched","validationMessage","title","body","country","options","loadCountry","push","id","newFormdata","newElements","setState","updateForm","content","newElement","event","target","blur","validData","validate","error","trim","message","submitForm","preventDefault","dataToSubmit","formIsValid","key","console","log","postError","submitButton","showError","onEditorStateChange","contentState","getCurrentContent","rawState","html","componentDidMount","render","postContainer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport FormField from '../widgets/FormFields/formFields';\nimport styles from './dashboard.module.css';\n\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertFromRaw, convertToRaw } from 'draft-js';\nimport { stateToHTML } from 'draft-js-export-html';\n\nclass Dashboard extends Component {\n    state = {\n        editorState: EditorState.createEmpty(),\n        registerError: '',\n        loading: false,\n        formdata:{\n            author:{\n                element:'input',\n                value:'',\n                config:{\n                    name:'author_input',\n                    type:'text',\n                    placeholder:'Enter your name'\n                },\n                validation:{\n                    required:true\n                },\n                valid:false,\n                touched:false,\n                validationMessage:''\n            },\n            title:{\n                element:'input',\n                value:'',\n                config:{\n                    name:'title_input',\n                    type:'text',\n                    placeholder:'Enter your title'\n                },\n                validation:{\n                    required:true\n                },\n                valid:false,\n                touched:false,\n                validationMessage:''\n            },\n            body:{\n                element: 'texteditor',\n                value:'',\n                valid:true\n            },\n            country:{\n                element:'select',\n                value:'',\n                config:{\n                    name:'country_input',\n                    options:[]\n                },\n                validation:{\n                    required:true\n                },\n                valid:false,\n                touched:false,\n                validationMessage:''\n            }\n        }\n    }\n\n    componentDidMount(){\n        this.loadCountry()\n    }\n\n    loadCountry= () => {\n        let country = [];\n\n        country.push({id:1, name:'Canada'})\n        country.push({id:2, name:'USA'})\n        country.push({id:3, name:'S.Korea'})\n        country.push({id:4, name:'China'})\n        country.push({id:5, name:'Italy'})\n        country.push({id:6, name:'Japan'})\n        country.push({id:7, name:'Spain'})\n        country.push({id:8, name:'France'})\n        country.push({id:9, name:'Germany'})\n        country.push({id:10, name:'India'})\n\n        const newFormdata = {...this.state.formdata}\n        const newElements = {...newFormdata['country']}\n        newElements.config.options = country;\n        newFormdata['country'] = newElements;\n        this.setState({\n            formdata: newFormdata\n        })\n    }\n\n    updateForm = (element, content='') => {\n        const newFormdata = {\n            ...this.state.formdata\n        }\n        const newElement = {\n            ...newFormdata[element.id]\n        }\n\n        if(content === ''){\n            newElement.value = element.event.target.value;\n        }else{\n            newElement.value = content;\n        }\n\n        if(element.blur){\n            let validData = this.validate(newElement);\n            newElement.valid = validData[0];\n            newElement.validationMessage = validData[1];   \n        }\n        newElement.touched = element.blur;\n        newFormdata[element.id] = newElement;\n        \n        this.setState({\n            formdata:newFormdata\n        })\n    }\n\n    validate = (element) => {\n        let error = [true,''];\n\n        if(element.validation.required){\n            const valid = element.value.trim() !=='';\n            const message = `${!valid ? 'This field is required':''}`;\n            error = !valid ? [valid,message] : error\n        }\n\n        return error;\n    }\n\n    submitForm = (event) => {\n        event.preventDefault();\n\n        let dataToSubmit = {};\n        let formIsValid = true;\n\n        for(let key in this.state.formdata){\n            dataToSubmit[key] = this.state.formdata[key].value\n        }\n        for(let key in this.state.formdata){\n            formIsValid = this.state.formdata[key].valid && formIsValid;\n        }\n        console.log(dataToSubmit)\n\n        if(formIsValid){\n            console.log('SUBMIT POST')\n        }else{\n            this.setState({\n                postError: 'Something went wrong'\n            })\n        }\n    }\n\n    submitButton = () => (\n        this.state.loading ?\n            'loading...'\n        :\n        <div>\n            <button type=\"submit\"> Add post </button>\n        </div>\n    )\n\n    showError = () => (\n        this.state.registerError !== '' ? \n            <div className={styles.error}>{this.state.registerError}</div>\n        : ''\n    )\n\n    onEditorStateChange = (editorState) => {\n        let contentState = editorState.getCurrentContent();\n        let rawState = convertToRaw(contentState)\n        let html = stateToHTML(contentState)\n\n        this.updateForm({id:'body'}, html)\n\n        this.setState({\n            editorState\n        })\n    }\n\n\n    render() {\n        return(\n            <div className={styles.postContainer}>\n                <form onSubmit={this.submitForm}>\n                    <h2>Add Post</h2>\n\n                    <FormField\n                        id={'author'}\n                        formdata={this.state.formdata.author}\n                        change={(element)=>this.updateForm(element)}\n                    />\n                    <FormField\n                        id={'title'}\n                        formdata={this.state.formdata.title}\n                        change={(element)=>this.updateForm(element)}\n                    />\n\n                    <Editor\n                        editorState={this.state.editorState}\n                        wrapperClassName=\"myEditor-wrapper\"\n                        editorClassName=\"myEditor-editor\"\n                        onEditorStateChange={this.onEditorStateChange}\n                    />\n\n                    <FormField\n                        id={'Country'}\n                        formdata={this.state.formdata.country}\n                        change={(element)=>this.updateForm(element)}\n                    />\n\n                    {this.submitButton()}\n                    {this.showError()}\n                </form>               \n            </div>\n        )\n    }\n}\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}